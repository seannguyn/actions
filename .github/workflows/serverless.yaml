name: Build and deploy serverless application on ZBI Kubernetes

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      GH_PAT:
        required: false
    env:
      DOCKER_REPO:
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.set-vars.outputs.IMAGE_NAME }}
      image_tag: ${{ steps.set-vars.outputs.IMAGE_TAG }}
      repo_name: ${{ steps.set-vars.outputs.REPO_NAME }}
      org_name: ${{ steps.set-vars.outputs.ORG_NAME }}

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Set Variables
        id: set-vars
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)
          IMAGE_NAME="${{ env.DOCKER_REPO }}/$(basename ${{ github.repository }})"
          REPO_NAME=$(basename ${{ github.repository }})
          ORG_NAME=${{ github.repository_owner }}

          echo "IMAGE_TAG=$IMAGE_TAG" >> "$GITHUB_ENV"
          echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_ENV"
          echo "REPO_NAME=$REPO_NAME" >> "$GITHUB_ENV"
          echo "ORG_NAME=$ORG_NAME" >> "$GITHUB_ENV"

          echo "IMAGE_TAG=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
          echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_OUTPUT"
          echo "REPO_NAME=$REPO_NAME" >> "$GITHUB_OUTPUT"
          echo "ORG_NAME=$ORG_NAME" >> "$GITHUB_OUTPUT"

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t "${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}" .
          docker push "${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"

  create-pr-in-deployment:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ needs.build-and-push.outputs.image_name }}
      IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}
      REPO_NAME: ${{ needs.build-and-push.outputs.repo_name }}
      ORG_NAME: ${{ needs.build-and-push.outputs.org_name }}

    steps:
      - name: Checkout Deployment Repo
        uses: actions/checkout@v3
        with:
          repository: seannguyn/deployment
          token: ${{ secrets.GH_PAT }}
          ref: main
          path: deployment

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Create Kustomization YAML from Template
        run: |
          echo "ENV VARIABLES:"
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}"
          echo "IMAGE_TAG=${{ env.IMAGE_TAG }}"
          echo "ORG_NAME=${{ env.ORG_NAME }}"
          echo "REPO_NAME=${{ env.REPO_NAME }}"

          mkdir -p deployment/orgs/${{ env.ORG_NAME }}/${{ env.REPO_NAME }}
          cp deployment/template-kustomization.yaml deployment/orgs/${{ env.ORG_NAME }}/${{ env.REPO_NAME }}/kustomization.yaml
          
          sed -i "s|\${REPO_NAME}|${{ env.REPO_NAME }}|g" deployment/orgs/${{ env.ORG_NAME }}/${{ env.REPO_NAME }}/kustomization.yaml
          sed -i "s|\${IMAGE_NAME}|${{ env.IMAGE_NAME }}|g" deployment/orgs/${{ env.ORG_NAME }}/${{ env.REPO_NAME }}/kustomization.yaml
          sed -i "s|\${IMAGE_TAG}|${{ env.IMAGE_TAG }}|g" deployment/orgs/${{ env.ORG_NAME }}/${{ env.REPO_NAME }}/kustomization.yaml

      - name: Commit and Push Changes
        run: |
          cd deployment
          git checkout -b add-${{ env.REPO_NAME }}-deployment
          git add orgs/${{ env.ORG_NAME }}/${{ env.REPO_NAME }}/kustomization.yaml
          git commit -m "Add kustomization for ${{ env.REPO_NAME }}"
          git push origin add-${{ env.REPO_NAME }}-deployment

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, owner } = context.repo;
            const response = await github.rest.pulls.create({
              owner: '${{ github.repository_owner }}',
              repo: 'deployment',
              title: `Add deployment for ${{ env.REPO_NAME }}`,
              head: `add-${{ env.REPO_NAME }}-deployment`,
              base: 'main',
              body: 'This PR adds a new deployment for `${{ env.REPO_NAME }}`.',
            });
            console.log(`Pull request created: ${response.data.html_url}`);
